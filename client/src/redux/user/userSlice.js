import { createSlice } from "@reduxjs/toolkit";
const initialState={
    currentUser:null,       //initializing states 
    error:null,
    loading:false
};

/*  CONCEPT 

The createSlice function from @reduxjs/toolkit simplifies creating slices. It takes an object with several properties:
name: A string that uniquely identifies the slice. In this case, it's named 'user'.
initialState: An object defining the initial state for the slice. Here, it includes currentUser (null initially), error (null initially), and loading (false initially).
reducers: An object containing reducer functions that handle actions and update the state.

Reducers (State Updaters):

Reducers are pure functions that receive the current state and an action object as arguments.

The reducer functions in the reducers object are automatically generated by createSlice based on the keys in the reducers object. Each reducer function receives the current state as the first argument and the action object as the second argument.
Actions:

Actions are plain JavaScript objects that describe what happened in your application. These actions trigger state updates through reducers. In Redux, an action is a plain JavaScript object with two optional properties: type and payload. The type property is a string that uniquely identifies the kind of action being dispatched. 
The signInStart, signInSuccess, and signInFailure functions created by userSlice.actions are action creators(actions) that return action objects with appropriate types and (potentially) payloads.

Automatic Action Creator Generation:

When you define reducers within a slice using createSlice from @reduxjs/toolkit, it offers a helpful feature: automatic action creator generation.
Based on the reducer function names (e.g., signInStart, signInSuccess, signInFailure), @reduxjs/toolkit implicitly creates action creators with corresponding types.
In this example:
signInStart reducer function implies an action type of "USER_SIGN_IN_START".
signInSuccess implies an action type of "USER_SIGN_IN_SUCCESS".
signInFailure implies an action type of "USER_SIGN_IN_FAILURE".
HERE AUTOMATIC CREATION IS IMPLEMENTED.

WORKING OF REACT-REDUX SET UP:
When an action is dispatched using dispatch() function, the store starts looking for a reducer that can handle the action based on its type property.
Reducers are pure functions that take the current state and the dispatched action as arguments and return a new state object.
Once the store finds the reducer that matches the action type, it invokes that reducer function.The reducer examines the action's type and payload (if present) and uses this information to update the state in a predictable way.
After the reducer updates the state, it returns the new state object.
The store then replaces its internal state with the new state returned by the reducer.
The store notifies all connected components that the state has changed, causing them to re-render with the updated state.


*/

const userSlice=createSlice({            
    name:'user',
    initialState,
    reducers:{
        signInStart:(state)=>{             
            state.loading=true;     
        }, 
        signInSuccess:(state,action)=>{
            state.currentUser=action.payload;
            
            state.loading=false;    
            state.error=null;
        },
        signInFailure:(state,action)=>{
           
            state.loading=false 
            state.error=action.payload;
        },
        updateUserStart: (state) => {
            state.loading = true;
          },
      
        updateUserSuccess:(state,action)=>{
            state.currentUser=action.payload;
            
            state.loading=false;    
            state.error=null;
        },
        updateUserFailure:(state,action)=>{
            
            
            state.loading=false;    
            state.error=action.payload;
        },
        deleteUserStart:(state)=>{
            state.loading=true;
            
        },
        deleteUserSuccess:(state,action)=>{
            state.currentUser=null;
            
            state.loading=false;    
            state.error=null;
        },
        deleteUserFailure:(state,action)=>{
            state.loading=false;    
            state.error=action.payload;
        },
        signoutUserStart:(state)=>{
            state.loading=true;
            
        },
        signoutUserSuccess:(state,action)=>{
            state.currentUser=null;
            
            state.loading=false;    
            state.error=null;
        },
        signoutUserFailure:(state,action)=>{
            state.loading=false;    
            state.error=action.payload;
        },
    }
});

//Destructuring and exporting the automatically generated action creators.
export const {signInStart,signInSuccess,signInFailure,updateUserStart,updateUserSuccess,updateUserFailure,deleteUserStart,deleteUserSuccess,deleteUserFailure,signoutUserStart,signoutUserSuccess,signoutUserFailure}=userSlice.actions;
export default userSlice.reducer;   //passing this to store  